// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql" // NOTE: sqlite does not work with NextAuth.js
  url      = env("SUPABASE_DATABASE_URL")
  // url = env("LOCAL_DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  image         String?
  email         String    @unique
  emailVerified DateTime?
  name          String?
  createdAt     DateTime  @default(now())
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
}

model Profile {
  id       String   @id @default(cuid())
  userName String   @unique @default(cuid())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
  links    Links?
  private  Boolean @default(false)
  liked    String[] @default([])
  cards    Card[] 
}

model Card {
  id        String   @id @default(cuid())
  creator   Profile  @relation(fields: [creatorId], references: [userName], onDelete: Cascade)
  creatorId String   
  likedBy   String[]
  private   Boolean @default(false)
  name      String   @unique
  projectType ProjectType
  level Level
  openSource Boolean @default(true)
  description String
  uses      String
  tags String[] @default([])
  links CardLinks?
}

model CardLinks {
   id  String  @id @default(cuid())
   card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
   cardId String @unique
  github String? @default("")
  website String? @default("")
}

model Links {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique
  linkedin  String @default("none")
  github    String @default("none")
  youtube   String @default("none")
  portfolio String @default("none")
  instagram String @default("none")
  twitter   String @default("none")
  facebook  String @default("none")
  discord   String @default("none")
  company   String @default("none")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProjectType {
  WEBSITE
  WEBAPP
  VIDEOGAME
  FRAMEWORK
  APPLICATION
  CRYPTO
  ALGORITHM
  AI
  PACKAGE
  LIBRARY
  OS
  BOT
  SCRIPT
  LANGUAGE
  OTHER
}

enum Level {
  PROFESSIONAL
  HOBBY
  PORTFOLIO
}